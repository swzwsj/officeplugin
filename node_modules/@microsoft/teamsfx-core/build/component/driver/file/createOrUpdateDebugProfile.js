"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOrUpdateDebugProfileDriver = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const typedi_1 = require("typedi");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../utils/common");
const constants_1 = require("../aad/utility/constants");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const updateProgress_1 = require("../middleware/updateProgress");
const common_2 = require("../../../error/common");
const tools_1 = require("../../../common/tools");
const comment_json_1 = require("comment-json");
const commentJson = tslib_1.__importStar(require("comment-json"));
const utils = tslib_1.__importStar(require("util"));
const create_1 = require("../teamsApp/create");
const debugV3MigrationUtils_1 = require("../../../core/middleware/utils/debug/debugV3MigrationUtils");
const actionName = "file/createOrUpdateDebugProfile";
const helpLink = "https://aka.ms/teamsfx-actions/file-createOrUpdateDebugProfile";
const launchSettingsFilePath = "./Properties/launchSettings.json";
const launchUrlTemplate = "https://teams.microsoft.com/l/app/%s?installAppPackage=true&webjoin=true&appTenantId=%s";
let CreateOrUpdateDebugProfileDriver = class CreateOrUpdateDebugProfileDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.file.createOrUpdateDebugProfile.description");
    }
    async run(args, context) {
        return common_1.wrapRun(async () => {
            const result = await this.handler(args, context);
            return result.output;
        });
    }
    async execute(args, ctx) {
        let summaries = [];
        const outputResult = await common_1.wrapRun(async () => {
            const result = await this.handler(args, ctx);
            summaries = result.summaries;
            return result.output;
        });
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context) {
        var _a, _b;
        try {
            const launchSettingsPath = common_1.getAbsolutePath(launchSettingsFilePath, context.projectPath);
            if (!(await fs.pathExists(launchSettingsPath))) {
                await fs.ensureFile(launchSettingsPath);
                await fs.writeFile(launchSettingsPath, "{}", "utf-8");
            }
            const launchSettingsContent = await fs.readFile(launchSettingsPath, "utf-8");
            const data = comment_json_1.parse(launchSettingsContent.toString());
            if (!debugV3MigrationUtils_1.isCommentObject(data)) {
                throw new teamsfx_api_1.UserError("LaunchSettingsFileInvalid", localizeUtils_1.getLocalizedString("driver.file.createOrUpdateDebugProfile.launchSettingsFileInvalid", launchSettingsPath), helpLink);
            }
            let launchUrl = utils.format(launchUrlTemplate, args.appId, process.env[create_1.internalOutputNames.teamsAppTenantId]);
            if (args.loginHint === undefined || args.loginHint === true) {
                const tokenObjectRes = await context.m365TokenProvider.getJsonObject({
                    scopes: tools_1.AppStudioScopes,
                });
                if (tokenObjectRes.isErr()) {
                    throw tokenObjectRes.error;
                }
                const tokenObject = tokenObjectRes.value;
                if (tokenObject && "upn" in tokenObject) {
                    launchUrl += `&login_hint=${tokenObject.upn}`;
                }
            }
            data.profiles = data.profiles || {};
            data.profiles[args.name] =
                data.profiles[args.name] ||
                    commentJson.parse(`{
        // uncommnet the lines which your project need to debug
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
          // function app
          //"TEAMSFX_NOTIFICATION_LOCALSTORE_DIR": "../../.." // Path to project folder $(MSBuildProjectDirectory)
        },
        //"hotReloadProfile": "aspnetcore",
        // command and response, web notification or workflow app
        //"applicationUrl": "http://localhost:5130",
        // message extension app
        //"applicationUrl": "https://localhost:7130;http://localhost:5130",
        // tab app
        //"applicationUrl": "https://localhost:44302;http://localhost:2544",
        // function notification app
        // "commandLineArgs": "host start --port 5130 --pause-on-error",
      }`);
            data.profiles[args.name].launchUrl = launchUrl;
            await fs.writeFile(launchSettingsPath, commentJson.stringify(data, null, 4), "utf-8");
            return {
                output: new Map(),
                summaries: [
                    localizeUtils_1.getLocalizedString("driver.file.createOrUpdateDebugProfile.summary", launchSettingsFilePath),
                ],
            };
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            const message = JSON.stringify(error);
            (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw new common_2.UnhandledError(error, actionName);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName),
        updateProgress_1.updateProgress(localizeUtils_1.getLocalizedString("driver.file.progressBar.createOrUpdateDebugProfile")),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOrUpdateDebugProfileDriver.prototype, "run", null);
tslib_1.__decorate([
    lib_1.hooks([
        addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName),
        updateProgress_1.updateProgress(localizeUtils_1.getLocalizedString("driver.file.progressBar.createOrUpdateDebugProfile")),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOrUpdateDebugProfileDriver.prototype, "execute", null);
CreateOrUpdateDebugProfileDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateOrUpdateDebugProfileDriver);
exports.CreateOrUpdateDebugProfileDriver = CreateOrUpdateDebugProfileDriver;
//# sourceMappingURL=createOrUpdateDebugProfile.js.map